---
title: Simulating exponential survival times
author: Jon Fintzi
date: May 17, 2021
---

# Summary

We're going to try simulating survival data with exponentially distributed failure times. Bunch of ways to do 
this:

- Using the `Distributions.jl` package to sample exponential random variates. 
- Using the inverse CDF method, i.e., sampling Unif(0,1) variates and using the survival function (Crowther and Lambert).
- By integrating an exponential density to get the exponential CDF and then appealing to the previous method.
- Other algorithms, e.g., uniformization, importance/rejection sampling, MCMC, etc.

We can start, I guess, by loading the packages we think we'll need and setting the RNG seed.

```julia; echo
# load packages
using Distributions,Random,Plots,DataFrames,StatsBase

# set the seed
Random.seed!(52787)
```

# Simulation using the `Distributions.jl` package

We start by defining an exponential distribution, which in the `Distributions.jl` package is parameterized 
naturally by its mean, i.e., 

$$
\begin{align*}
f(y|\theta) &= \frac{1}{\theta}\exp\left(\frac{y}{\theta}\right),\ y>0,\ \theta>0.
\end{align*}
$$

```julia
expdist1 = Exponential(1.0); # exponential with mean 1
expdist2 = Exponential(2.0); # exponential with mean 2

# look, we can get the parameters, support, rate, and scale of these distributions
dists = [expdist1, expdist2];
println("Distribution \t Parameters \t Support \t Scale \t Rate")
reshape([dists; params.(dists); ((d)->(minimum(d),maximum(d))).(dists); scale.(dists); rate.(dists)], length(dists), 5);
```

## Brief interlude

Question: how can we define anonymous functions inside comprehensions? 
```julia
# like this
s = [x^2 for x = 1:10]
m = [x*y for x in 1:3 for y in 3:-1:1]
```

Question: how to insert comments in Weave documents?
Answer: Just like regular markdown comments, see [here](https://alvinalexander.com/technology/markdown-comments-syntax-not-in-generated-output/)

Let's sample from the distributions. Julia treats the distribution as an object and executes the actual sampling 
using the `rand()` function. 

```julia
# also do stuff like this
names = ["Jon", "Meghan", "Jason"]
rand(names)     # unweighted sample using the base rand() function

# question: how to supply samplig weights? Use sample() from the StatsBase package
# question: how to table the resulting samples? use counts() from StatsBase

# suppose we want to sample names weighting by how many letters per name
nchars = length.(names); # count characters
name_samps = sample(names, Weights(nchars), 10000);
countmap(name_samps) # counts() is for integer values and countmap is for arbitrary values
proportionmap(name_samps) # proportios is for integer values, proportionmap for arbitrary values
nchars / sum(nchars) # true proportions
```

## Back to simulating survival data

We'll plot histograms of the samples against their analytic densities.

```julia
N = Int64(1e4); # note that we need to coerce 1e5 to type Int64

samp_exp1 = rand(expdist1, N);
samp_exp2 = rand(expdist2, N);

# evaluate densities
# these are tuples (like lists), created by using a comma
dens1 = (x=0:0.1:10, y=pdf(expdist1,0:0.1:10));
dens2 = (x=0:0.1:10, y=pdf(expdist2,0:0.1:10));

histogram(samp_exp1, normalize=true, bins = 0:0.25:10, fillcolor = :blue, fillalpha = 0.3, label = "Exponential(1), sample")
histogram!(samp_exp2, normalize=true, bins = 0:0.25:10, fillcolor = :red, fillalpha = 0.3, label = "Exponential(2), sample")

plot!(dens1[:x], dens1[:y], color = :blue, label = "Exponential(1), analytic")
plot!(dens2[:x], dens2[:y], color = :red, label = "Exponential(2), analytic")
```
